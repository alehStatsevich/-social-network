[{"D:\\react\\02proect\\src\\index.tsx":"1","D:\\react\\02proect\\src\\reportWebVitals.ts":"2","D:\\react\\02proect\\src\\App.tsx":"3","D:\\react\\02proect\\src\\components\\Header\\Header.tsx":"4","D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx":"5","D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx":"6","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"7","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"8","D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx":"9","D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx":"10","D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"11","D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx":"12","D:\\react\\02proect\\src\\redux\\state.tsx":"13","D:\\react\\02proect\\src\\redux\\profile-reduser.tsx":"14","D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx":"15","D:\\react\\02proect\\src\\components\\Dialogs\\DialogsContainer.tsx":"16","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"17","D:\\react\\02proect\\src\\StoreContext.tsx":"18","D:\\react\\02proect\\src\\redux\\redux-store.tsx":"19","D:\\react\\02proect\\src\\redux\\users-reduser.ts":"20","D:\\react\\02proect\\src\\components\\Users\\UsersContainer.tsx":"21","D:\\react\\02proect\\src\\components\\Users\\Users.tsx":"22","D:\\react\\02proect\\src\\components\\Profile\\ProfileContainer.tsx":"23","D:\\react\\02proect\\src\\components\\Header\\HeaderContainer.tsx":"24","D:\\react\\02proect\\src\\components\\Preloader.tsx":"25","D:\\react\\02proect\\src\\redux\\auth-reduser.ts":"26","D:\\react\\02proect\\src\\components\\Login\\Login.tsx":"27","D:\\react\\02proect\\src\\api\\api.ts":"28"},{"size":2002,"mtime":1616097707642,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":1608541342413,"results":"31","hashOfConfig":"30"},{"size":1532,"mtime":1621194265976,"results":"32","hashOfConfig":"30"},{"size":7548,"mtime":1620152510053,"results":"33","hashOfConfig":"30"},{"size":798,"mtime":1620052406112,"results":"34","hashOfConfig":"30"},{"size":854,"mtime":1616097707633,"results":"35","hashOfConfig":"30"},{"size":1858,"mtime":1615636251115,"results":"36","hashOfConfig":"30"},{"size":428,"mtime":1610289157392,"results":"37","hashOfConfig":"30"},{"size":1995,"mtime":1622372145281,"results":"38","hashOfConfig":"30"},{"size":16439,"mtime":1620057470980,"results":"39","hashOfConfig":"30"},{"size":450,"mtime":1613655520183,"results":"40","hashOfConfig":"30"},{"size":266,"mtime":1613671414551,"results":"41","hashOfConfig":"30"},{"size":4701,"mtime":1614860906405,"results":"42","hashOfConfig":"43"},{"size":2928,"mtime":1621193255118,"results":"44","hashOfConfig":"30"},{"size":2442,"mtime":1616097707643,"results":"45","hashOfConfig":"30"},{"size":1933,"mtime":1616097707629,"results":"46","hashOfConfig":"30"},{"size":3110,"mtime":1615476207987,"results":"47","hashOfConfig":"30"},{"size":337,"mtime":1614940946770,"results":"48","hashOfConfig":"43"},{"size":1341,"mtime":1615819187212,"results":"49","hashOfConfig":"30"},{"size":6301,"mtime":1621186587285,"results":"50","hashOfConfig":"30"},{"size":4395,"mtime":1621186587347,"results":"51","hashOfConfig":"30"},{"size":3465,"mtime":1621099556013,"results":"52","hashOfConfig":"30"},{"size":2128,"mtime":1622372034021,"results":"53","hashOfConfig":"30"},{"size":1140,"mtime":1622367834778,"results":"54","hashOfConfig":"30"},{"size":243,"mtime":1616097707633,"results":"55","hashOfConfig":"30"},{"size":2375,"mtime":1622371411183,"results":"56","hashOfConfig":"30"},{"size":101,"mtime":1622367085079,"results":"57","hashOfConfig":"30"},{"size":860,"mtime":1621191987635,"results":"58","hashOfConfig":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"ay6f91",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1hmcuqe",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"61"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"61"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react\\02proect\\src\\index.tsx",[],["125","126"],"D:\\react\\02proect\\src\\reportWebVitals.ts",[],["127","128"],"D:\\react\\02proect\\src\\App.tsx",[],"D:\\react\\02proect\\src\\components\\Header\\Header.tsx",[],"D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx",[],["129","130"],"D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx",["131","132","133"],"import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport  {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>News</a>\r\n        </div>\r\n        <div className={s.item}>\r\n        <a>Music</a>\r\n    </div>\r\n        <div className={s.item}>\r\n            <a>Setting</a>\r\n        </div>\r\n    </nav>\r\n\r\n}\r\nexport default Navbar;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["134","135"],"import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/state\";\r\n\r\n\r\nclass newPostText {\r\n}\r\n\r\nexport type MyPostsPropsType ={\r\n    posts: PostType[]\r\n    newPostText: string\r\n     addPost: () => void\r\n    updateNewPostText: (text: string)=> void\r\n}\r\n\r\nconst MyPosts = (props:MyPostsPropsType) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n    //ссылка ссьлающаяся на  элемент в textarea\r\n    //  let newPostElement = React.createRef();\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let addPost = () => {\r\n        props.addPost();\r\n        // let text = newPostElement.current.value;\r\n        // props.dispatch(addPostActionCreator())\r\n    }\r\n\r\n    const changeTextarea = () => {\r\n        // if (newPostElement.current) {\r\n\r\n        let text= newPostElement.current?.value;\r\n            props.updateNewPostText(text||\"\")\r\n            // let action = updateNewTextActionCreator(text)\r\n            // props.dispatch(action)\r\n\r\n\r\n    }\r\n\r\n    return <div className={s.postsBlock}>\r\n        <h3> my posts</h3>\r\n        <div>\r\n            <div>\r\n                <textarea ref={newPostElement} onChange={changeTextarea}\r\n                          value={props.newPostText}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={props.addPost}>Add post</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n}\r\nexport default MyPosts;\r\n//\r\n// posts: PostType[]\r\n// changeText: (newPostText: string )=> void\r\n//     message: PostType[]\r\n// likesCount: PostType[]\r\n//  addPost: (text: newPostText) => void\r\n//    newPostText: string\r\n//\r\n//\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx",["136","137","138","139","140"],"D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx",["141"],"D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx",[],"D:\\react\\02proect\\src\\redux\\state.tsx",[],["142","143"],"D:\\react\\02proect\\src\\redux\\profile-reduser.tsx",[],"D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx",["144"],"import {DialogType, MessageType, StateType} from \"./state\";\r\nexport const UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\n export const SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\n type dialogsPageType  = {\r\n    messages: MessageType[]\r\n    dialogs: DialogType[]\r\n    newMessageBody: string\r\n }\r\n let initialState :dialogsPageType = {\r\n    messages: [\r\n       {id: 1, message: 'Hi'},\r\n       {id: 2, message: 'How is your'},\r\n       {id: 3, message: 'Yo'},\r\n       {id: 4, message: 'Yo'},\r\n       {id: 5, message: 'Yo'}\r\n    ],\r\n    dialogs: [\r\n       {id: 1, name: 'Dima'},\r\n       {id: 2, name: 'Andrey'},\r\n       {id: 3, name: 'Sveta'},\r\n       {id: 4, name: 'Sasha'},\r\n       {id: 5, name: 'Viktor'},\r\n       {id: 6, name: 'Valera'}\r\n    ],\r\n    newMessageBody: \"\"\r\n }\r\n\r\nexport  const dialogsReducer = (state= initialState, action: any): dialogsPageType => {\r\n\r\n\r\n\r\n   switch (action.type) {\r\n      case UPDATE_NEW_MESSAGE_BODY:\r\n         let stateCopy = {...state}\r\n         //поверхносная копия\r\n         stateCopy.newMessageBody = action.body;\r\n         //ретурним копи стэйт.если вернем стейт это будет тот что приходит в функцию и не будет перерисовки\r\n         return stateCopy;\r\n      case SEND_MESSAGE: {\r\n         let body = state.newMessageBody;\r\n         let stateCopy2 = {\r\n            ...state,\r\n            newMessageBody: '',\r\n            messages: [...state.messages,{id: 6, message: body}]}\r\n        //копируем месаджи и  пушим messages.push({id: 6, message: body}\r\n\r\n\r\n         return stateCopy2;\r\n     ///???????\r\n      }\r\n      default:\r\n         return state;//????????????\r\n   }\r\n}\r\nexport const sendMessageCreator = () => {\r\n   return{type: 'SEND-MESSAGE'} as const\r\n}\r\nexport const updateNewMessageBodyCreator = (body: string) => {\r\n   return {type: 'UPDATE-NEW-MESSAGE-BODY', body: body} as const\r\n}\r\n\r\n\r\n\r\n//  if(action.type === 'UPDATE-NEW-MESSAGE-BODY'){\r\n//       state.dialogsPage.newMessageBody = action.body;\r\n//\r\n//    }else if(action.type === 'SEND-MESSAGE'){\r\n//       let body = state.dialogsPage.newMessageBody;\r\n//       state.dialogsPage.newMessageBody = '';\r\n//       state.dialogsPage.messages.push({id: 6, message: body})\r\n//    }\r\n//\r\n//    return state;\r\n// }переделали в switch\r\n// stateCopy2.messages.push({id: 6, message: body});\r\n// export default dialogsReducer;","D:\\react\\02proect\\src\\components\\Dialogs\\DialogsContainer.tsx",["145"],"import React from \"react\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nimport {Dispatch} from \"redux\";\r\nimport {StateType} from \"../../redux/state\";\r\n\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        updateNewMessageBody: (body: string) => {\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator())\r\n        }\r\n    }\r\n}\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\n\r\nexport default DialogsContainer;\r\n\r\n// type DialogsPropsType ={\r\n//    store:  StoreType\r\n// }\r\n\r\n// const DialogsContainer = (props:DialogsPropsType ) => {\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {(store) => {\r\n//             let state = store.getState().dialogsPage;\r\n//\r\n//             // let dialogsElements =  state.dialogs.map( d => <DialogItem name={d.name} id={d.id}/>);\r\n//             // let messagesElements = state.messages.map((m) => <Message message={m.message}/>);\r\n//             // let newMessageBody = state.newMessageBody;\r\n//             let onSendMessageClick = () => {\r\n//                 store.dispatch(sendMessageCreator())\r\n//             }\r\n//             let onNewMessageChange = (body: string) => {\r\n//                 // let body = event.target.value\r\n//                 store.dispatch(updateNewMessageBodyCreator(body))\r\n//             }\r\n//\r\n//             // @ts-ignore\r\n//             return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//                             sendMessage={onSendMessageClick}\r\n//                             dialogsPage={state}/>\r\n//         }}\r\n//     </StoreContext.Consumer>\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["146"],"import React from \"react\";\r\n\r\nimport {addPostActionCreator, updateNewTextActionCreator} from \"../../../redux/profile-reduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport  {StateType} from \"../../../redux/state\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state: StateType ) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst  mapDispatchToProps = (dispatch:  Dispatch) => {\r\n    return {\r\n        updateNewPostText: (text: string) => {\r\n            let action = updateNewTextActionCreator(text)\r\n            dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator())\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n\r\n//\r\n// posts: PostType[]\r\n// changeText: (newPostText: string )=> void\r\n//     message: PostType[]\r\n// likesCount: PostType[]\r\n//  addPost: (text: newPostText) => void\r\n//    newPostText: string\r\n// export type MyPostsPropsType = {\r\n//     store:  StoreType\r\n//     dispatch: (action: ActionsType)=> void\r\n//     updateNewPostText:  (text: string) => void\r\n//     newPost: string\r\n// }\r\n//\r\n// const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//     // let postsElements =\r\n//     //     props.store._state.profilePage.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n//     // //ссылка ссьлающаяся на  элемент в textarea\r\n//     // //  let newPostElement = React.createRef();\r\n//     // let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n//     //переносим в  <StoreContext.Consumer>\r\n// //let state = props.store.getState()\r\n// //     let addPost = () => {\r\n// //         // let text = newPostElement.current.value;\r\n// //         props.store.dispatch(addPostActionCreator())\r\n// //     }\r\n// //     let changeTextarea = (text: string) => {\r\n// //         // if (newPostElement.current) {\r\n// //         //     let text = newPostElement.current.value;\r\n// //             let action = updateNewTextActionCreator(text)\r\n// //             props.store.dispatch(action)\r\n// //     }\r\n//\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState().profilePage\r\n//\r\n//                 let addPost = () => {\r\n//                     store.dispatch(addPostActionCreator())\r\n//                 }\r\n//                 let changeTextarea = (text: string) => {\r\n//                     let action = updateNewTextActionCreator(text)\r\n//                     store.dispatch(action)\r\n//                 }\r\n//\r\n//                 return <MyPosts updateNewPostText= {changeTextarea}\r\n//                                 addPost={addPost}\r\n//                                 posts={state.profilePage.posts}\r\n//                                 newPostText={state.profilePage.newPostText}/>}\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\StoreContext.tsx",["147"],"D:\\react\\02proect\\src\\redux\\redux-store.tsx",[],"D:\\react\\02proect\\src\\redux\\users-reduser.ts",["148","149","150"],"D:\\react\\02proect\\src\\components\\Users\\UsersContainer.tsx",["151","152","153","154","155","156","157","158"],"import React from 'react'\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {\r\n    follow, getUsersThunkCreator,\r\n    initialStateType,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowingInProgress, toggleIsFetching, unfollow,\r\n    UserType\r\n} from \"../../redux/users-reduser\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Preloader\";\r\nimport {userAPI} from \"../../api/api\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    users: UserType[]\r\n    pageSize: any\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: any\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\ntype MapDispatchToPropsType = {\r\n\r\n    setUsers: (users: UserType[]) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: any) => void\r\n\r\n}\r\ntype UsersPropsType = any\r\n\r\n//MapStatePropsType & MapDispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component <PropsT> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage,this.props.pageSize);\r\n        // this.props.toggleIsFetching(true);\r\n        // userAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false);\r\n        //     this.props.setUsers(data.items);\r\n        //     this.props.setTotalUsersCount(data.totalCount);\r\n        // });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n        // this.props.setCurrentPage(pageNumber);\r\n        // this.props.toggleIsFetching(true);\r\n        // userAPI.getUsers(pageNumber, this.props.pageSize)\r\n        //     .then(data => {\r\n        //         this.props.toggleIsFetching(false)\r\n        //         this.props.setUsers(data.items)\r\n        //     });\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   toggleFollowingInProgress={this.props.toggleFollowingInProgress}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            /></>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n// let mapDispatchToProps = (dispatch: Dispatch) => {\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId));\r\n//             //диспатчим результат работы followAC\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(followAC(userId));\r\n//         },\r\n//         setUsers:(users: UserType[]) => {\r\n//         dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) =>{\r\n//             dispatch(setCurrentPageAC (pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) =>{\r\n//             dispatch(setTotalUsersCountAC (totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean)=> {\r\n//             dispatch( toggleIsFetching(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n//переделали без АС\r\n// export default connect(mapStateToProps, {\r\n//     follow,\r\n//     unfollow,\r\n//     setUsers,\r\n//     setCurrentPage,\r\n//     setTotalUsersCount,\r\n//     toggleIsFetching,\r\n//     toggleFollowingInProgress\r\n// })(UsersContainer);\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    // setUsers,\r\n    setCurrentPage,\r\n    // setTotalUsersCount,\r\n    // toggleIsFetching,\r\n    toggleFollowingInProgress,\r\n    getUsers:getUsersThunkCreator\r\n})\r\nexport type PropsT = ConnectedProps<typeof connector>\r\nexport default connector(UsersContainer);\r\n","D:\\react\\02proect\\src\\components\\Users\\Users.tsx",["159","160","161","162"],"D:\\react\\02proect\\src\\components\\Profile\\ProfileContainer.tsx",["163","164"],"D:\\react\\02proect\\src\\components\\Header\\HeaderContainer.tsx",["165"],"D:\\react\\02proect\\src\\components\\Preloader.tsx",["166"],"D:\\react\\02proect\\src\\redux\\auth-reduser.ts",[],"D:\\react\\02proect\\src\\components\\Login\\Login.tsx",[],"D:\\react\\02proect\\src\\api\\api.ts",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"167","replacedBy":"171"},{"ruleId":"169","replacedBy":"172"},{"ruleId":"167","replacedBy":"173"},{"ruleId":"169","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":17,"column":13,"nodeType":"177","endLine":17,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":20,"column":9,"nodeType":"177","endLine":20,"endColumn":12},{"ruleId":"175","severity":1,"message":"176","line":23,"column":13,"nodeType":"177","endLine":23,"endColumn":16},{"ruleId":"178","severity":1,"message":"179","line":7,"column":7,"nodeType":"180","messageId":"181","endLine":7,"endColumn":18},{"ruleId":"178","severity":1,"message":"182","line":24,"column":9,"nodeType":"180","messageId":"181","endLine":24,"endColumn":16},{"ruleId":"178","severity":1,"message":"183","line":5,"column":26,"nodeType":"180","messageId":"181","endLine":5,"endColumn":36},{"ruleId":"178","severity":1,"message":"184","line":5,"column":38,"nodeType":"180","messageId":"181","endLine":5,"endColumn":49},{"ruleId":"178","severity":1,"message":"185","line":5,"column":51,"nodeType":"180","messageId":"181","endLine":5,"endColumn":60},{"ruleId":"178","severity":1,"message":"186","line":6,"column":9,"nodeType":"180","messageId":"181","endLine":6,"endColumn":27},{"ruleId":"178","severity":1,"message":"187","line":6,"column":29,"nodeType":"180","messageId":"181","endLine":6,"endColumn":56},{"ruleId":"188","severity":1,"message":"189","line":15,"column":13,"nodeType":"177","endLine":15,"endColumn":52},{"ruleId":"167","replacedBy":"190"},{"ruleId":"169","replacedBy":"191"},{"ruleId":"178","severity":1,"message":"192","line":1,"column":34,"nodeType":"180","messageId":"181","endLine":1,"endColumn":43},{"ruleId":"178","severity":1,"message":"193","line":1,"column":8,"nodeType":"180","messageId":"181","endLine":1,"endColumn":13},{"ruleId":"178","severity":1,"message":"193","line":1,"column":8,"nodeType":"180","messageId":"181","endLine":1,"endColumn":13},{"ruleId":"178","severity":1,"message":"193","line":2,"column":9,"nodeType":"180","messageId":"181","endLine":2,"endColumn":14},{"ruleId":"194","severity":1,"message":"195","line":90,"column":65,"nodeType":"196","messageId":"197","endLine":90,"endColumn":67},{"ruleId":"194","severity":1,"message":"198","line":136,"column":46,"nodeType":"196","messageId":"197","endLine":136,"endColumn":48},{"ruleId":"194","severity":1,"message":"198","line":149,"column":46,"nodeType":"196","messageId":"197","endLine":149,"endColumn":48},{"ruleId":"178","severity":1,"message":"199","line":5,"column":5,"nodeType":"180","messageId":"181","endLine":5,"endColumn":21},{"ruleId":"178","severity":1,"message":"200","line":7,"column":5,"nodeType":"180","messageId":"181","endLine":7,"endColumn":23},{"ruleId":"178","severity":1,"message":"201","line":8,"column":5,"nodeType":"180","messageId":"181","endLine":8,"endColumn":13},{"ruleId":"178","severity":1,"message":"202","line":8,"column":42,"nodeType":"180","messageId":"181","endLine":8,"endColumn":58},{"ruleId":"178","severity":1,"message":"203","line":14,"column":9,"nodeType":"180","messageId":"181","endLine":14,"endColumn":16},{"ruleId":"178","severity":1,"message":"204","line":17,"column":6,"nodeType":"180","messageId":"181","endLine":17,"endColumn":23},{"ruleId":"178","severity":1,"message":"205","line":26,"column":6,"nodeType":"180","messageId":"181","endLine":26,"endColumn":28},{"ruleId":"178","severity":1,"message":"206","line":33,"column":6,"nodeType":"180","messageId":"181","endLine":33,"endColumn":20},{"ruleId":"178","severity":1,"message":"207","line":7,"column":9,"nodeType":"180","messageId":"181","endLine":7,"endColumn":15},{"ruleId":"208","severity":1,"message":"209","line":23,"column":5,"nodeType":"210","messageId":"211","endLine":93,"endColumn":6},{"ruleId":"188","severity":1,"message":"189","line":46,"column":14,"nodeType":"177","endLine":46,"endColumn":103},{"ruleId":"194","severity":1,"message":"198","line":72,"column":55,"nodeType":"196","messageId":"197","endLine":72,"endColumn":57},{"ruleId":"178","severity":1,"message":"212","line":3,"column":8,"nodeType":"180","messageId":"181","endLine":3,"endColumn":13},{"ruleId":"194","severity":1,"message":"198","line":40,"column":31,"nodeType":"196","messageId":"197","endLine":40,"endColumn":33},{"ruleId":"178","severity":1,"message":"213","line":4,"column":9,"nodeType":"180","messageId":"181","endLine":4,"endColumn":22},{"ruleId":"188","severity":1,"message":"189","line":5,"column":9,"nodeType":"177","endLine":5,"endColumn":31},"no-native-reassign",["214"],"no-negated-in-lhs",["215"],["214"],["215"],["214"],["215"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'newPostText' is defined but never used.","Identifier","unusedVar","'addPost' is assigned a value but never used.","'DialogType' is defined but never used.","'MessageType' is defined but never used.","'StoreType' is defined but never used.","'sendMessageCreator' is defined but never used.","'updateNewMessageBodyCreator' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["214"],["215"],"'StateType' is defined but never used.","'React' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'initialStateType' is defined but never used.","'setTotalUsersCount' is defined but never used.","'setUsers' is defined but never used.","'toggleIsFetching' is defined but never used.","'userAPI' is defined but never used.","'MapStatePropsType' is defined but never used.","'MapDispatchToPropsType' is defined but never used.","'UsersPropsType' is defined but never used.","'PropsT' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'axios' is defined but never used.","'SET_USER_DATA' is defined but never used.","no-global-assign","no-unsafe-negation"]