[{"D:\\react\\02proect\\src\\index.tsx":"1","D:\\react\\02proect\\src\\reportWebVitals.ts":"2","D:\\react\\02proect\\src\\App.tsx":"3","D:\\react\\02proect\\src\\components\\Header\\Header.tsx":"4","D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx":"5","D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx":"6","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"7","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"8","D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx":"9","D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx":"10","D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"11","D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx":"12","D:\\react\\02proect\\src\\redux\\state.tsx":"13","D:\\react\\02proect\\src\\redux\\profile-reduser.tsx":"14","D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx":"15","D:\\react\\02proect\\src\\components\\Dialogs\\DialogsContainer.tsx":"16","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"17","D:\\react\\02proect\\src\\StoreContext.tsx":"18","D:\\react\\02proect\\src\\redux\\redux-store.tsx":"19","D:\\react\\02proect\\src\\redux\\users-reduser.ts":"20","D:\\react\\02proect\\src\\components\\Users\\UsersContainer.tsx":"21","D:\\react\\02proect\\src\\components\\Users\\Users.tsx":"22","D:\\react\\02proect\\src\\components\\Profile\\ProfileContainer.tsx":"23","D:\\react\\02proect\\src\\components\\Header\\HeaderContainer.tsx":"24","D:\\react\\02proect\\src\\components\\Preloader.tsx":"25","D:\\react\\02proect\\src\\redux\\auth-reduser.ts":"26"},{"size":2002,"mtime":1616097707642,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1608541342413,"results":"29","hashOfConfig":"28"},{"size":1556,"mtime":1620060090343,"results":"30","hashOfConfig":"28"},{"size":7548,"mtime":1620152510053,"results":"31","hashOfConfig":"28"},{"size":798,"mtime":1620052406112,"results":"32","hashOfConfig":"28"},{"size":854,"mtime":1616097707633,"results":"33","hashOfConfig":"28"},{"size":1858,"mtime":1615636251115,"results":"34","hashOfConfig":"28"},{"size":428,"mtime":1610289157392,"results":"35","hashOfConfig":"28"},{"size":1819,"mtime":1616097707629,"results":"36","hashOfConfig":"28"},{"size":16439,"mtime":1620057470980,"results":"37","hashOfConfig":"28"},{"size":450,"mtime":1613655520183,"results":"38","hashOfConfig":"28"},{"size":266,"mtime":1613671414551,"results":"39","hashOfConfig":"28"},{"size":4701,"mtime":1614860906405,"results":"40","hashOfConfig":"41"},{"size":2335,"mtime":1620047622708,"results":"42","hashOfConfig":"28"},{"size":2442,"mtime":1616097707643,"results":"43","hashOfConfig":"28"},{"size":1933,"mtime":1616097707629,"results":"44","hashOfConfig":"28"},{"size":3110,"mtime":1615476207987,"results":"45","hashOfConfig":"28"},{"size":337,"mtime":1614940946770,"results":"46","hashOfConfig":"41"},{"size":1341,"mtime":1615819187212,"results":"47","hashOfConfig":"28"},{"size":4964,"mtime":1621094584766,"results":"48","hashOfConfig":"28"},{"size":3843,"mtime":1621098941611,"results":"49","hashOfConfig":"28"},{"size":3465,"mtime":1621099556013,"results":"50","hashOfConfig":"28"},{"size":1805,"mtime":1620060738091,"results":"51","hashOfConfig":"28"},{"size":1113,"mtime":1620156984062,"results":"52","hashOfConfig":"28"},{"size":243,"mtime":1616097707633,"results":"53","hashOfConfig":"28"},{"size":2022,"mtime":1620157510929,"results":"54","hashOfConfig":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"ay6f91",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1hmcuqe",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"57"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react\\02proect\\src\\index.tsx",[],["118","119"],"D:\\react\\02proect\\src\\reportWebVitals.ts",[],["120","121"],"D:\\react\\02proect\\src\\App.tsx",["122"],"D:\\react\\02proect\\src\\components\\Header\\Header.tsx",[],"D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx",[],["123","124"],"D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx",["125","126","127"],"import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport  {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>News</a>\r\n        </div>\r\n        <div className={s.item}>\r\n        <a>Music</a>\r\n    </div>\r\n        <div className={s.item}>\r\n            <a>Setting</a>\r\n        </div>\r\n    </nav>\r\n\r\n}\r\nexport default Navbar;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["128","129"],"import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/state\";\r\n\r\n\r\nclass newPostText {\r\n}\r\n\r\nexport type MyPostsPropsType ={\r\n    posts: PostType[]\r\n    newPostText: string\r\n     addPost: () => void\r\n    updateNewPostText: (text: string)=> void\r\n}\r\n\r\nconst MyPosts = (props:MyPostsPropsType) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n    //ссылка ссьлающаяся на  элемент в textarea\r\n    //  let newPostElement = React.createRef();\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let addPost = () => {\r\n        props.addPost();\r\n        // let text = newPostElement.current.value;\r\n        // props.dispatch(addPostActionCreator())\r\n    }\r\n\r\n    const changeTextarea = () => {\r\n        // if (newPostElement.current) {\r\n\r\n        let text= newPostElement.current?.value;\r\n            props.updateNewPostText(text||\"\")\r\n            // let action = updateNewTextActionCreator(text)\r\n            // props.dispatch(action)\r\n\r\n\r\n    }\r\n\r\n    return <div className={s.postsBlock}>\r\n        <h3> my posts</h3>\r\n        <div>\r\n            <div>\r\n                <textarea ref={newPostElement} onChange={changeTextarea}\r\n                          value={props.newPostText}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={props.addPost}>Add post</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n}\r\nexport default MyPosts;\r\n//\r\n// posts: PostType[]\r\n// changeText: (newPostText: string )=> void\r\n//     message: PostType[]\r\n// likesCount: PostType[]\r\n//  addPost: (text: newPostText) => void\r\n//    newPostText: string\r\n//\r\n//\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx",["130","131","132","133","134"],"D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx",["135"],"D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx",[],"D:\\react\\02proect\\src\\redux\\state.tsx",[],["136","137"],"D:\\react\\02proect\\src\\redux\\profile-reduser.tsx",[],"D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx",["138"],"import {DialogType, MessageType, StateType} from \"./state\";\r\nexport const UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\n export const SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\n type dialogsPageType  = {\r\n    messages: MessageType[]\r\n    dialogs: DialogType[]\r\n    newMessageBody: string\r\n }\r\n let initialState :dialogsPageType = {\r\n    messages: [\r\n       {id: 1, message: 'Hi'},\r\n       {id: 2, message: 'How is your'},\r\n       {id: 3, message: 'Yo'},\r\n       {id: 4, message: 'Yo'},\r\n       {id: 5, message: 'Yo'}\r\n    ],\r\n    dialogs: [\r\n       {id: 1, name: 'Dima'},\r\n       {id: 2, name: 'Andrey'},\r\n       {id: 3, name: 'Sveta'},\r\n       {id: 4, name: 'Sasha'},\r\n       {id: 5, name: 'Viktor'},\r\n       {id: 6, name: 'Valera'}\r\n    ],\r\n    newMessageBody: \"\"\r\n }\r\n\r\nexport  const dialogsReducer = (state= initialState, action: any): dialogsPageType => {\r\n\r\n\r\n\r\n   switch (action.type) {\r\n      case UPDATE_NEW_MESSAGE_BODY:\r\n         let stateCopy = {...state}\r\n         //поверхносная копия\r\n         stateCopy.newMessageBody = action.body;\r\n         //ретурним копи стэйт.если вернем стейт это будет тот что приходит в функцию и не будет перерисовки\r\n         return stateCopy;\r\n      case SEND_MESSAGE: {\r\n         let body = state.newMessageBody;\r\n         let stateCopy2 = {\r\n            ...state,\r\n            newMessageBody: '',\r\n            messages: [...state.messages,{id: 6, message: body}]}\r\n        //копируем месаджи и  пушим messages.push({id: 6, message: body}\r\n\r\n\r\n         return stateCopy2;\r\n     ///???????\r\n      }\r\n      default:\r\n         return state;//????????????\r\n   }\r\n}\r\nexport const sendMessageCreator = () => {\r\n   return{type: 'SEND-MESSAGE'} as const\r\n}\r\nexport const updateNewMessageBodyCreator = (body: string) => {\r\n   return {type: 'UPDATE-NEW-MESSAGE-BODY', body: body} as const\r\n}\r\n\r\n\r\n\r\n//  if(action.type === 'UPDATE-NEW-MESSAGE-BODY'){\r\n//       state.dialogsPage.newMessageBody = action.body;\r\n//\r\n//    }else if(action.type === 'SEND-MESSAGE'){\r\n//       let body = state.dialogsPage.newMessageBody;\r\n//       state.dialogsPage.newMessageBody = '';\r\n//       state.dialogsPage.messages.push({id: 6, message: body})\r\n//    }\r\n//\r\n//    return state;\r\n// }переделали в switch\r\n// stateCopy2.messages.push({id: 6, message: body});\r\n// export default dialogsReducer;","D:\\react\\02proect\\src\\components\\Dialogs\\DialogsContainer.tsx",["139"],"import React from \"react\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nimport {Dispatch} from \"redux\";\r\nimport {StateType} from \"../../redux/state\";\r\n\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        updateNewMessageBody: (body: string) => {\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator())\r\n        }\r\n    }\r\n}\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\n\r\nexport default DialogsContainer;\r\n\r\n// type DialogsPropsType ={\r\n//    store:  StoreType\r\n// }\r\n\r\n// const DialogsContainer = (props:DialogsPropsType ) => {\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {(store) => {\r\n//             let state = store.getState().dialogsPage;\r\n//\r\n//             // let dialogsElements =  state.dialogs.map( d => <DialogItem name={d.name} id={d.id}/>);\r\n//             // let messagesElements = state.messages.map((m) => <Message message={m.message}/>);\r\n//             // let newMessageBody = state.newMessageBody;\r\n//             let onSendMessageClick = () => {\r\n//                 store.dispatch(sendMessageCreator())\r\n//             }\r\n//             let onNewMessageChange = (body: string) => {\r\n//                 // let body = event.target.value\r\n//                 store.dispatch(updateNewMessageBodyCreator(body))\r\n//             }\r\n//\r\n//             // @ts-ignore\r\n//             return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//                             sendMessage={onSendMessageClick}\r\n//                             dialogsPage={state}/>\r\n//         }}\r\n//     </StoreContext.Consumer>\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["140"],"import React from \"react\";\r\n\r\nimport {addPostActionCreator, updateNewTextActionCreator} from \"../../../redux/profile-reduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport  {StateType} from \"../../../redux/state\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state: StateType ) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst  mapDispatchToProps = (dispatch:  Dispatch) => {\r\n    return {\r\n        updateNewPostText: (text: string) => {\r\n            let action = updateNewTextActionCreator(text)\r\n            dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator())\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n\r\n//\r\n// posts: PostType[]\r\n// changeText: (newPostText: string )=> void\r\n//     message: PostType[]\r\n// likesCount: PostType[]\r\n//  addPost: (text: newPostText) => void\r\n//    newPostText: string\r\n// export type MyPostsPropsType = {\r\n//     store:  StoreType\r\n//     dispatch: (action: ActionsType)=> void\r\n//     updateNewPostText:  (text: string) => void\r\n//     newPost: string\r\n// }\r\n//\r\n// const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//     // let postsElements =\r\n//     //     props.store._state.profilePage.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n//     // //ссылка ссьлающаяся на  элемент в textarea\r\n//     // //  let newPostElement = React.createRef();\r\n//     // let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n//     //переносим в  <StoreContext.Consumer>\r\n// //let state = props.store.getState()\r\n// //     let addPost = () => {\r\n// //         // let text = newPostElement.current.value;\r\n// //         props.store.dispatch(addPostActionCreator())\r\n// //     }\r\n// //     let changeTextarea = (text: string) => {\r\n// //         // if (newPostElement.current) {\r\n// //         //     let text = newPostElement.current.value;\r\n// //             let action = updateNewTextActionCreator(text)\r\n// //             props.store.dispatch(action)\r\n// //     }\r\n//\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState().profilePage\r\n//\r\n//                 let addPost = () => {\r\n//                     store.dispatch(addPostActionCreator())\r\n//                 }\r\n//                 let changeTextarea = (text: string) => {\r\n//                     let action = updateNewTextActionCreator(text)\r\n//                     store.dispatch(action)\r\n//                 }\r\n//\r\n//                 return <MyPosts updateNewPostText= {changeTextarea}\r\n//                                 addPost={addPost}\r\n//                                 posts={state.profilePage.posts}\r\n//                                 newPostText={state.profilePage.newPostText}/>}\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\StoreContext.tsx",["141"],"D:\\react\\02proect\\src\\redux\\redux-store.tsx",[],"D:\\react\\02proect\\src\\redux\\users-reduser.ts",["142"],"\r\n\r\n\r\nexport const FOLLOW = 'FOLLOW';\r\nexport const UNFOLLOW = 'UNFOLLOW';\r\nexport const SET_USERS= 'SET_USERS';\r\nexport const SET_CURRENT_PAGE ='SET_CURRENT_PAGE';\r\nexport const SET_TOTAL_USERS_COUNT ='SET_TOTAL_USERS_COUNT';\r\nexport const TOGGLE_IS_FETCHING ='TOGGLE_IS_FETCHING';\r\nexport const TOGGLE_IS_FETCHING_PROGRESS ='TOGGLE_IS_FETCHING_PROGRESS';\r\n\r\n export type UserType = {\r\n    id: number\r\n     photos: any\r\n     // photoUrl: any\r\n    followed: boolean\r\n    fullName:string\r\n    status:string\r\n    location: any\r\n\r\n}\r\n\r\nexport type initialStateType = {\r\n    users: UserType[]\r\n    pageSize: any\r\n    totalUsersCount:number\r\n    currentPage: number\r\n    isFetching:boolean\r\n    followingInProgress: UserType[]\r\n}\r\n\r\n\r\nlet initialState: initialStateType  = {\r\n   users: [],\r\n    pageSize: 5,\r\n    totalUsersCount:0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n export const usersReducer = (state= initialState , action: any): initialStateType => {\r\n    switch (action.type) {\r\n      case FOLLOW:\r\n         return {\r\n           ...state,\r\n           //делаем копию обьекта юзерс мапим если юзер ид ===action.userId(берем его из const followAC = (userId))\r\n           // возращаем копию обьекта ...u ( {id: 1,followed:false, fullName: \"Dima\",) и меняем значение followed на противоположное\r\n           //иначе возращаем не измененный обьект\r\n           users: state.users.map(u=>{\r\n              if(u.id=== action.userId){\r\n                 return {...u,followed: true}\r\n              }\r\n              return u;\r\n           })\r\n        }\r\n\r\n      case UNFOLLOW:\r\n         return {\r\n            ...state,\r\n            //делаем копию обьекта юзерс мапим если юзер ид ===action.userId(берем его из const followAC = (userId))\r\n            // возращаем копию обьекта ...u ( {id: 1,followed:false, fullName: \"Dima\",) и меняем значение followed на противоположное\r\n            //иначе возращаем не измененный обьект\r\n            users: state.users.map(u=>{\r\n               if(u.id=== action.userId){\r\n                  return {...u,followed: false}\r\n               }\r\n               return u;\r\n            })\r\n         }\r\n      case SET_USERS: {\r\n          //делаем копию стейта,берем копию старых юзеров и добавляем к ним юзеров которые пришли из action.users\r\n          return {...state, users: action.users}\r\n      }\r\n        case SET_CURRENT_PAGE:{\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT:{\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING:{\r\n            return {...state,isFetching:action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FETCHING_PROGRESS :{\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n       default:\r\n          return state;\r\n    }\r\n }\r\nexport const follow = (userId: number) => {\r\n   return{type: 'FOLLOW',userId} as const\r\n}\r\nexport const unfollow = (userId: number) => {\r\n   return {type: 'UNFOLLOW',userId} as const\r\n}\r\nexport const setUsers = (users: UserType[]) => {\r\n   return {type: 'SET_USERS',users} as const\r\n}\r\nexport const setCurrentPage = ( currentPage: number) =>{\r\n     return {type:  SET_CURRENT_PAGE,  currentPage: currentPage} as const\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number) =>{\r\n    return {type:  SET_TOTAL_USERS_COUNT, count:totalUsersCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) =>{\r\n    return {type: TOGGLE_IS_FETCHING, isFetching} as const\r\n}\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId:number) =>{\r\n    return {type: TOGGLE_IS_FETCHING_PROGRESS, isFetching,userId} as const\r\n}\r\n export default usersReducer;\r\n// {id: 1,photoUrl:'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSujODEKwrdvmj6jufsQRsId0hv3Wr6vfppsA&usqp=CAU',\r\n//     followed:false, fullName: \"Dima\", status: \"Hello\",location:{city:\"Minsk\", country: \"Belarus\"}},\r\n// {id: 2,photoUrl:'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNBR5SL43JjDN9N0r_q0FLWhi1WSTq1nDi_Q&usqp=CAU',\r\n//     followed:false, fullName: \"Eska\", status: \"Hello\",location:{city:\"Brest\", country: \"Belarus\"}},\r\n// {id: 3,photoUrl:'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSI3DxknKrLBlFGLEtUQmCbc0adqoOYc0VLYQ&usqp=CAU',\r\n//     followed:true,fullName: \"Leonid\", status: \"Hello\",location:{city:\"Lida\", country: \"Belarus\"}}","D:\\react\\02proect\\src\\components\\Users\\UsersContainer.tsx",["143"],"D:\\react\\02proect\\src\\components\\Users\\Users.tsx",["144","145","146","147"],"D:\\react\\02proect\\src\\components\\Profile\\ProfileContainer.tsx",[],"D:\\react\\02proect\\src\\components\\Header\\HeaderContainer.tsx",["148"],"import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {SET_USER_DATA, setAuthUserData} from \"../../redux/auth-reduser\";\r\n\r\n\r\nexport type PropsType =  {\r\n    isAuth: boolean\r\n    login: string\r\n    setAuthUserData: (id: number,login:string,email:string) => void\r\n}\r\n\r\n\r\nclass HeaderContainer extends React.Component <PropsType> {\r\n    componentDidMount() {\r\n\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`,{\r\n            withCredentials: true\r\n        })\r\n            .then(response => {\r\n                if(response.data.resultCode === 0) {\r\n                    let {id, login, email} = response.data.data.login\r\n                    this.props.setAuthUserData(id, login, email)\r\n                }\r\n        });\r\n    }\r\n    render() {\r\n\r\n        return <Header {...this.props}/> //????????\r\n    }\r\n}\r\nconst mapStateToProps = (state: any) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect(mapStateToProps, {setAuthUserData})(HeaderContainer);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Preloader.tsx",["149"],"D:\\react\\02proect\\src\\redux\\auth-reduser.ts",[],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"150","replacedBy":"154"},{"ruleId":"152","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":15},{"ruleId":"150","replacedBy":"160"},{"ruleId":"152","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":17,"column":13,"nodeType":"164","endLine":17,"endColumn":16},{"ruleId":"162","severity":1,"message":"163","line":20,"column":9,"nodeType":"164","endLine":20,"endColumn":12},{"ruleId":"162","severity":1,"message":"163","line":23,"column":13,"nodeType":"164","endLine":23,"endColumn":16},{"ruleId":"156","severity":1,"message":"165","line":7,"column":7,"nodeType":"158","messageId":"159","endLine":7,"endColumn":18},{"ruleId":"156","severity":1,"message":"166","line":24,"column":9,"nodeType":"158","messageId":"159","endLine":24,"endColumn":16},{"ruleId":"156","severity":1,"message":"167","line":5,"column":26,"nodeType":"158","messageId":"159","endLine":5,"endColumn":36},{"ruleId":"156","severity":1,"message":"168","line":5,"column":38,"nodeType":"158","messageId":"159","endLine":5,"endColumn":49},{"ruleId":"156","severity":1,"message":"169","line":5,"column":51,"nodeType":"158","messageId":"159","endLine":5,"endColumn":60},{"ruleId":"156","severity":1,"message":"170","line":6,"column":9,"nodeType":"158","messageId":"159","endLine":6,"endColumn":27},{"ruleId":"156","severity":1,"message":"171","line":6,"column":29,"nodeType":"158","messageId":"159","endLine":6,"endColumn":56},{"ruleId":"172","severity":1,"message":"173","line":15,"column":13,"nodeType":"164","endLine":15,"endColumn":52},{"ruleId":"150","replacedBy":"174"},{"ruleId":"152","replacedBy":"175"},{"ruleId":"156","severity":1,"message":"176","line":1,"column":34,"nodeType":"158","messageId":"159","endLine":1,"endColumn":43},{"ruleId":"156","severity":1,"message":"177","line":1,"column":8,"nodeType":"158","messageId":"159","endLine":1,"endColumn":13},{"ruleId":"156","severity":1,"message":"177","line":1,"column":8,"nodeType":"158","messageId":"159","endLine":1,"endColumn":13},{"ruleId":"156","severity":1,"message":"177","line":2,"column":9,"nodeType":"158","messageId":"159","endLine":2,"endColumn":14},{"ruleId":"178","severity":1,"message":"179","line":89,"column":65,"nodeType":"180","messageId":"181","endLine":89,"endColumn":67},{"ruleId":null,"fatal":true,"severity":2,"message":"182","line":118,"column":17},{"ruleId":"156","severity":1,"message":"183","line":7,"column":9,"nodeType":"158","messageId":"159","endLine":7,"endColumn":15},{"ruleId":"184","severity":1,"message":"185","line":23,"column":5,"nodeType":"186","messageId":"187","endLine":93,"endColumn":6},{"ruleId":"172","severity":1,"message":"173","line":46,"column":14,"nodeType":"164","endLine":46,"endColumn":103},{"ruleId":"178","severity":1,"message":"188","line":72,"column":55,"nodeType":"180","messageId":"181","endLine":72,"endColumn":57},{"ruleId":"156","severity":1,"message":"189","line":5,"column":9,"nodeType":"158","messageId":"159","endLine":5,"endColumn":22},{"ruleId":"172","severity":1,"message":"173","line":5,"column":9,"nodeType":"164","endLine":5,"endColumn":31},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],["190"],["191"],"@typescript-eslint/no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar",["190"],["191"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'newPostText' is defined but never used.","'addPost' is assigned a value but never used.","'DialogType' is defined but never used.","'MessageType' is defined but never used.","'StoreType' is defined but never used.","'sendMessageCreator' is defined but never used.","'updateNewMessageBodyCreator' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["190"],["191"],"'StateType' is defined but never used.","'React' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Parsing error: Expression expected.","'PropsT' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Expected '===' and instead saw '=='.","'SET_USER_DATA' is defined but never used.","no-global-assign","no-unsafe-negation"]