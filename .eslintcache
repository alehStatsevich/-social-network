[{"D:\\react\\02proect\\src\\index.tsx":"1","D:\\react\\02proect\\src\\reportWebVitals.ts":"2","D:\\react\\02proect\\src\\App.tsx":"3","D:\\react\\02proect\\src\\components\\Header\\Header.tsx":"4","D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx":"5","D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx":"6","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"7","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"8","D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx":"9","D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx":"10","D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"11","D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx":"12","D:\\react\\02proect\\src\\redux\\state.tsx":"13","D:\\react\\02proect\\src\\redux\\profile-reduser.tsx":"14","D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx":"15","D:\\react\\02proect\\src\\components\\Dialogs\\DialogsContainer.tsx":"16","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"17","D:\\react\\02proect\\src\\StoreContext.tsx":"18","D:\\react\\02proect\\src\\redux\\redux-store.tsx":"19","D:\\react\\02proect\\src\\redux\\users-reduser.ts":"20","D:\\react\\02proect\\src\\components\\Users\\UsersContainer.tsx":"21","D:\\react\\02proect\\src\\components\\Users\\Users.tsx":"22","D:\\react\\02proect\\src\\components\\Profile\\ProfileContainer.tsx":"23","D:\\react\\02proect\\src\\components\\Header\\HeaderContainer.tsx":"24","D:\\react\\02proect\\src\\components\\Preloader.tsx":"25","D:\\react\\02proect\\src\\redux\\auth-reduser.ts":"26"},{"size":2002,"mtime":1616097707642,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1608541342413,"results":"29","hashOfConfig":"28"},{"size":1556,"mtime":1620060090343,"results":"30","hashOfConfig":"28"},{"size":7548,"mtime":1620152510053,"results":"31","hashOfConfig":"28"},{"size":798,"mtime":1620052406112,"results":"32","hashOfConfig":"28"},{"size":854,"mtime":1616097707633,"results":"33","hashOfConfig":"28"},{"size":1858,"mtime":1615636251115,"results":"34","hashOfConfig":"28"},{"size":428,"mtime":1610289157392,"results":"35","hashOfConfig":"28"},{"size":1819,"mtime":1616097707629,"results":"36","hashOfConfig":"28"},{"size":16439,"mtime":1620057470980,"results":"37","hashOfConfig":"28"},{"size":450,"mtime":1613655520183,"results":"38","hashOfConfig":"28"},{"size":266,"mtime":1613671414551,"results":"39","hashOfConfig":"28"},{"size":4701,"mtime":1614860906405,"results":"40","hashOfConfig":"41"},{"size":2335,"mtime":1620047622708,"results":"42","hashOfConfig":"28"},{"size":2442,"mtime":1616097707643,"results":"43","hashOfConfig":"28"},{"size":1933,"mtime":1616097707629,"results":"44","hashOfConfig":"28"},{"size":3110,"mtime":1615476207987,"results":"45","hashOfConfig":"28"},{"size":337,"mtime":1614940946770,"results":"46","hashOfConfig":"41"},{"size":1341,"mtime":1615819187212,"results":"47","hashOfConfig":"28"},{"size":4331,"mtime":1615816978248,"results":"48","hashOfConfig":"28"},{"size":3774,"mtime":1616097707641,"results":"49","hashOfConfig":"28"},{"size":1926,"mtime":1620043404671,"results":"50","hashOfConfig":"28"},{"size":1805,"mtime":1620060738091,"results":"51","hashOfConfig":"28"},{"size":1113,"mtime":1620156984062,"results":"52","hashOfConfig":"28"},{"size":243,"mtime":1616097707633,"results":"53","hashOfConfig":"28"},{"size":2022,"mtime":1620157510929,"results":"54","hashOfConfig":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"ay6f91",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"1hmcuqe",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"57"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"57"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react\\02proect\\src\\index.tsx",[],["116","117"],"D:\\react\\02proect\\src\\reportWebVitals.ts",[],["118","119"],"D:\\react\\02proect\\src\\App.tsx",["120"],"D:\\react\\02proect\\src\\components\\Header\\Header.tsx",[],"D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx",[],"D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx",["121","122","123"],"import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport  {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>News</a>\r\n        </div>\r\n        <div className={s.item}>\r\n        <a>Music</a>\r\n    </div>\r\n        <div className={s.item}>\r\n            <a>Setting</a>\r\n        </div>\r\n    </nav>\r\n\r\n}\r\nexport default Navbar;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["124","125"],"import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/state\";\r\n\r\n\r\nclass newPostText {\r\n}\r\n\r\nexport type MyPostsPropsType ={\r\n    posts: PostType[]\r\n    newPostText: string\r\n     addPost: () => void\r\n    updateNewPostText: (text: string)=> void\r\n}\r\n\r\nconst MyPosts = (props:MyPostsPropsType) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n    //ссылка ссьлающаяся на  элемент в textarea\r\n    //  let newPostElement = React.createRef();\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let addPost = () => {\r\n        props.addPost();\r\n        // let text = newPostElement.current.value;\r\n        // props.dispatch(addPostActionCreator())\r\n    }\r\n\r\n    const changeTextarea = () => {\r\n        // if (newPostElement.current) {\r\n\r\n        let text= newPostElement.current?.value;\r\n            props.updateNewPostText(text||\"\")\r\n            // let action = updateNewTextActionCreator(text)\r\n            // props.dispatch(action)\r\n\r\n\r\n    }\r\n\r\n    return <div className={s.postsBlock}>\r\n        <h3> my posts</h3>\r\n        <div>\r\n            <div>\r\n                <textarea ref={newPostElement} onChange={changeTextarea}\r\n                          value={props.newPostText}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={props.addPost}>Add post</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n}\r\nexport default MyPosts;\r\n//\r\n// posts: PostType[]\r\n// changeText: (newPostText: string )=> void\r\n//     message: PostType[]\r\n// likesCount: PostType[]\r\n//  addPost: (text: newPostText) => void\r\n//    newPostText: string\r\n//\r\n//\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx",["126","127","128","129","130"],"D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx",["131"],"D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx",[],"D:\\react\\02proect\\src\\redux\\state.tsx",[],["132","133"],"D:\\react\\02proect\\src\\redux\\profile-reduser.tsx",[],"D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx",["134"],"import {DialogType, MessageType, StateType} from \"./state\";\r\nexport const UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\n export const SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\n type dialogsPageType  = {\r\n    messages: MessageType[]\r\n    dialogs: DialogType[]\r\n    newMessageBody: string\r\n }\r\n let initialState :dialogsPageType = {\r\n    messages: [\r\n       {id: 1, message: 'Hi'},\r\n       {id: 2, message: 'How is your'},\r\n       {id: 3, message: 'Yo'},\r\n       {id: 4, message: 'Yo'},\r\n       {id: 5, message: 'Yo'}\r\n    ],\r\n    dialogs: [\r\n       {id: 1, name: 'Dima'},\r\n       {id: 2, name: 'Andrey'},\r\n       {id: 3, name: 'Sveta'},\r\n       {id: 4, name: 'Sasha'},\r\n       {id: 5, name: 'Viktor'},\r\n       {id: 6, name: 'Valera'}\r\n    ],\r\n    newMessageBody: \"\"\r\n }\r\n\r\nexport  const dialogsReducer = (state= initialState, action: any): dialogsPageType => {\r\n\r\n\r\n\r\n   switch (action.type) {\r\n      case UPDATE_NEW_MESSAGE_BODY:\r\n         let stateCopy = {...state}\r\n         //поверхносная копия\r\n         stateCopy.newMessageBody = action.body;\r\n         //ретурним копи стэйт.если вернем стейт это будет тот что приходит в функцию и не будет перерисовки\r\n         return stateCopy;\r\n      case SEND_MESSAGE: {\r\n         let body = state.newMessageBody;\r\n         let stateCopy2 = {\r\n            ...state,\r\n            newMessageBody: '',\r\n            messages: [...state.messages,{id: 6, message: body}]}\r\n        //копируем месаджи и  пушим messages.push({id: 6, message: body}\r\n\r\n\r\n         return stateCopy2;\r\n     ///???????\r\n      }\r\n      default:\r\n         return state;//????????????\r\n   }\r\n}\r\nexport const sendMessageCreator = () => {\r\n   return{type: 'SEND-MESSAGE'} as const\r\n}\r\nexport const updateNewMessageBodyCreator = (body: string) => {\r\n   return {type: 'UPDATE-NEW-MESSAGE-BODY', body: body} as const\r\n}\r\n\r\n\r\n\r\n//  if(action.type === 'UPDATE-NEW-MESSAGE-BODY'){\r\n//       state.dialogsPage.newMessageBody = action.body;\r\n//\r\n//    }else if(action.type === 'SEND-MESSAGE'){\r\n//       let body = state.dialogsPage.newMessageBody;\r\n//       state.dialogsPage.newMessageBody = '';\r\n//       state.dialogsPage.messages.push({id: 6, message: body})\r\n//    }\r\n//\r\n//    return state;\r\n// }переделали в switch\r\n// stateCopy2.messages.push({id: 6, message: body});\r\n// export default dialogsReducer;","D:\\react\\02proect\\src\\components\\Dialogs\\DialogsContainer.tsx",["135"],"import React from \"react\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nimport {Dispatch} from \"redux\";\r\nimport {StateType} from \"../../redux/state\";\r\n\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        updateNewMessageBody: (body: string) => {\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator())\r\n        }\r\n    }\r\n}\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\n\r\nexport default DialogsContainer;\r\n\r\n// type DialogsPropsType ={\r\n//    store:  StoreType\r\n// }\r\n\r\n// const DialogsContainer = (props:DialogsPropsType ) => {\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {(store) => {\r\n//             let state = store.getState().dialogsPage;\r\n//\r\n//             // let dialogsElements =  state.dialogs.map( d => <DialogItem name={d.name} id={d.id}/>);\r\n//             // let messagesElements = state.messages.map((m) => <Message message={m.message}/>);\r\n//             // let newMessageBody = state.newMessageBody;\r\n//             let onSendMessageClick = () => {\r\n//                 store.dispatch(sendMessageCreator())\r\n//             }\r\n//             let onNewMessageChange = (body: string) => {\r\n//                 // let body = event.target.value\r\n//                 store.dispatch(updateNewMessageBodyCreator(body))\r\n//             }\r\n//\r\n//             // @ts-ignore\r\n//             return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//                             sendMessage={onSendMessageClick}\r\n//                             dialogsPage={state}/>\r\n//         }}\r\n//     </StoreContext.Consumer>\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["136"],"import React from \"react\";\r\n\r\nimport {addPostActionCreator, updateNewTextActionCreator} from \"../../../redux/profile-reduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport  {StateType} from \"../../../redux/state\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state: StateType ) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst  mapDispatchToProps = (dispatch:  Dispatch) => {\r\n    return {\r\n        updateNewPostText: (text: string) => {\r\n            let action = updateNewTextActionCreator(text)\r\n            dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator())\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n\r\n//\r\n// posts: PostType[]\r\n// changeText: (newPostText: string )=> void\r\n//     message: PostType[]\r\n// likesCount: PostType[]\r\n//  addPost: (text: newPostText) => void\r\n//    newPostText: string\r\n// export type MyPostsPropsType = {\r\n//     store:  StoreType\r\n//     dispatch: (action: ActionsType)=> void\r\n//     updateNewPostText:  (text: string) => void\r\n//     newPost: string\r\n// }\r\n//\r\n// const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//     // let postsElements =\r\n//     //     props.store._state.profilePage.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n//     // //ссылка ссьлающаяся на  элемент в textarea\r\n//     // //  let newPostElement = React.createRef();\r\n//     // let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n//     //переносим в  <StoreContext.Consumer>\r\n// //let state = props.store.getState()\r\n// //     let addPost = () => {\r\n// //         // let text = newPostElement.current.value;\r\n// //         props.store.dispatch(addPostActionCreator())\r\n// //     }\r\n// //     let changeTextarea = (text: string) => {\r\n// //         // if (newPostElement.current) {\r\n// //         //     let text = newPostElement.current.value;\r\n// //             let action = updateNewTextActionCreator(text)\r\n// //             props.store.dispatch(action)\r\n// //     }\r\n//\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState().profilePage\r\n//\r\n//                 let addPost = () => {\r\n//                     store.dispatch(addPostActionCreator())\r\n//                 }\r\n//                 let changeTextarea = (text: string) => {\r\n//                     let action = updateNewTextActionCreator(text)\r\n//                     store.dispatch(action)\r\n//                 }\r\n//\r\n//                 return <MyPosts updateNewPostText= {changeTextarea}\r\n//                                 addPost={addPost}\r\n//                                 posts={state.profilePage.posts}\r\n//                                 newPostText={state.profilePage.newPostText}/>}\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\StoreContext.tsx",["137"],"D:\\react\\02proect\\src\\redux\\redux-store.tsx",[],"D:\\react\\02proect\\src\\redux\\users-reduser.ts",[],"D:\\react\\02proect\\src\\components\\Users\\UsersContainer.tsx",["138","139","140","141"],"import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport preloader from \"../../assets/images/preloader.gif\"\r\nimport {\r\n    follow,\r\n    initialStateType,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers, toggleIsFetching, unfollow,\r\n    UserType\r\n} from \"../../redux/users-reduser\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport Users from \"./Users\";\r\nimport axios from \"axios\";\r\nimport Preloader from \"../Preloader\";\r\n\r\ntype MapStatePropsType = {\r\n    users:  UserType[]\r\n    pageSize: any\r\n    totalUsersCount:number\r\n    currentPage: number\r\n    onPageChanged: any\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) =>void\r\n}\r\ntype MapDispatchToPropsType = {\r\n\r\n     setUsers:(users: UserType[]) =>void\r\n    setCurrentPage: (pageNumber: number) =>void\r\n     setTotalUsersCount: (totalCount: any) =>void\r\n\r\n}\r\ntype UsersPropsType = any\r\n    //MapStatePropsType & MapDispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component <UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage} \r\n        &count=${this.props.pageSize}`).then(response => {\r\n            this.props.toggleIsFetching(false);\r\n            this.props.setUsers(response.data.items);\r\n            this.props.setTotalUsersCount(response.data.totalCount);\r\n        });\r\n    }\r\n    onPageChanged = (pageNumber: any) => {\r\n        this.props.setCurrentPage (pageNumber);\r\n        this.props.toggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber} \r\n        &count=${this.props.pageSize}`).then(response => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(response.data.items)\r\n        });\r\n    }\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n        <Users totalUsersCount={this.props.totalUsersCount}\r\n                      pageSize={this.props.pageSize}\r\n                      currentPage={this.props.currentPage}\r\n                      onPageChanged={this.onPageChanged}\r\n                      users={this.props.users}\r\n                      follow={this.props.follow}\r\n                      unfollow={this.props.unfollow}\r\n         /></>\r\n    }}\r\n\r\nlet mapStateToProps = (state:  AppStateType) => {\r\n    return {\r\n\r\n       users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n\r\n    }\r\n}\r\n// let mapDispatchToProps = (dispatch: Dispatch) => {\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId));\r\n//             //диспатчим результат работы followAC\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(followAC(userId));\r\n//         },\r\n//         setUsers:(users: UserType[]) => {\r\n//         dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) =>{\r\n//             dispatch(setCurrentPageAC (pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) =>{\r\n//             dispatch(setTotalUsersCountAC (totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean)=> {\r\n//             dispatch( toggleIsFetching(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n//переделали без АС\r\n    export default connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setUsers,\r\n        setCurrentPage,\r\n        setTotalUsersCount,\r\n        toggleIsFetching\r\n    })(UsersContainer);","D:\\react\\02proect\\src\\components\\Users\\Users.tsx",["142","143"],"D:\\react\\02proect\\src\\components\\Profile\\ProfileContainer.tsx",[],"D:\\react\\02proect\\src\\components\\Header\\HeaderContainer.tsx",["144"],"D:\\react\\02proect\\src\\components\\Preloader.tsx",["145"],"D:\\react\\02proect\\src\\redux\\auth-reduser.ts",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"146","replacedBy":"150"},{"ruleId":"148","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":15},{"ruleId":"156","severity":1,"message":"157","line":17,"column":13,"nodeType":"158","endLine":17,"endColumn":16},{"ruleId":"156","severity":1,"message":"157","line":20,"column":9,"nodeType":"158","endLine":20,"endColumn":12},{"ruleId":"156","severity":1,"message":"157","line":23,"column":13,"nodeType":"158","endLine":23,"endColumn":16},{"ruleId":"152","severity":1,"message":"159","line":7,"column":7,"nodeType":"154","messageId":"155","endLine":7,"endColumn":18},{"ruleId":"152","severity":1,"message":"160","line":24,"column":9,"nodeType":"154","messageId":"155","endLine":24,"endColumn":16},{"ruleId":"152","severity":1,"message":"161","line":5,"column":26,"nodeType":"154","messageId":"155","endLine":5,"endColumn":36},{"ruleId":"152","severity":1,"message":"162","line":5,"column":38,"nodeType":"154","messageId":"155","endLine":5,"endColumn":49},{"ruleId":"152","severity":1,"message":"163","line":5,"column":51,"nodeType":"154","messageId":"155","endLine":5,"endColumn":60},{"ruleId":"152","severity":1,"message":"164","line":6,"column":9,"nodeType":"154","messageId":"155","endLine":6,"endColumn":27},{"ruleId":"152","severity":1,"message":"165","line":6,"column":29,"nodeType":"154","messageId":"155","endLine":6,"endColumn":56},{"ruleId":"166","severity":1,"message":"167","line":15,"column":13,"nodeType":"158","endLine":15,"endColumn":52},{"ruleId":"146","replacedBy":"168"},{"ruleId":"148","replacedBy":"169"},{"ruleId":"152","severity":1,"message":"170","line":1,"column":34,"nodeType":"154","messageId":"155","endLine":1,"endColumn":43},{"ruleId":"152","severity":1,"message":"171","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"171","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"171","line":2,"column":9,"nodeType":"154","messageId":"155","endLine":2,"endColumn":14},{"ruleId":"152","severity":1,"message":"172","line":3,"column":8,"nodeType":"154","messageId":"155","endLine":3,"endColumn":17},{"ruleId":"152","severity":1,"message":"173","line":6,"column":5,"nodeType":"154","messageId":"155","endLine":6,"endColumn":21},{"ruleId":"152","severity":1,"message":"174","line":17,"column":6,"nodeType":"154","messageId":"155","endLine":17,"endColumn":23},{"ruleId":"152","severity":1,"message":"175","line":26,"column":6,"nodeType":"154","messageId":"155","endLine":26,"endColumn":28},{"ruleId":"176","severity":1,"message":"177","line":18,"column":5,"nodeType":"178","messageId":"179","endLine":64,"endColumn":2},{"ruleId":"166","severity":1,"message":"167","line":39,"column":14,"nodeType":"158","endLine":39,"endColumn":103},{"ruleId":"152","severity":1,"message":"180","line":5,"column":9,"nodeType":"154","messageId":"155","endLine":5,"endColumn":22},{"ruleId":"166","severity":1,"message":"167","line":5,"column":9,"nodeType":"158","endLine":5,"endColumn":31},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],["181"],["182"],"@typescript-eslint/no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'newPostText' is defined but never used.","'addPost' is assigned a value but never used.","'DialogType' is defined but never used.","'MessageType' is defined but never used.","'StoreType' is defined but never used.","'sendMessageCreator' is defined but never used.","'updateNewMessageBodyCreator' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["181"],["182"],"'StateType' is defined but never used.","'React' is defined but never used.","'preloader' is defined but never used.","'initialStateType' is defined but never used.","'MapStatePropsType' is defined but never used.","'MapDispatchToPropsType' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'SET_USER_DATA' is defined but never used.","no-global-assign","no-unsafe-negation"]