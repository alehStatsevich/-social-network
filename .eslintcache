[{"D:\\react\\02proect\\src\\index.tsx":"1","D:\\react\\02proect\\src\\reportWebVitals.ts":"2","D:\\react\\02proect\\src\\App.tsx":"3","D:\\react\\02proect\\src\\components\\Header\\Header.tsx":"4","D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx":"5","D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx":"6","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"7","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"8","D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx":"9","D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx":"10","D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"11","D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx":"12","D:\\react\\02proect\\src\\redux\\state.tsx":"13","D:\\react\\02proect\\src\\redux\\profile-reduser.tsx":"14","D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx":"15","D:\\react\\02proect\\src\\components\\Dialogs\\DialogsContainer.tsx":"16","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"17","D:\\react\\02proect\\src\\StoreContext.tsx":"18","D:\\react\\02proect\\src\\redux\\redux-store.tsx":"19","D:\\react\\02proect\\src\\redux\\users-reduser.ts":"20","D:\\react\\02proect\\src\\components\\Users\\UsersContainer.tsx":"21","D:\\react\\02proect\\src\\components\\Users\\Users.tsx":"22","D:\\react\\02proect\\src\\components\\Profile\\ProfileContainer.tsx":"23"},{"size":2002,"mtime":1616097707642,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":1608541342413,"results":"26","hashOfConfig":"25"},{"size":1467,"mtime":1620043934133,"results":"27","hashOfConfig":"25"},{"size":7287,"mtime":1616097707631,"results":"28","hashOfConfig":"25"},{"size":798,"mtime":1620052406112,"results":"29","hashOfConfig":"25"},{"size":854,"mtime":1616097707633,"results":"30","hashOfConfig":"25"},{"size":1858,"mtime":1615636251115,"results":"31","hashOfConfig":"25"},{"size":428,"mtime":1610289157392,"results":"32","hashOfConfig":"25"},{"size":1819,"mtime":1615051902706,"results":"33","hashOfConfig":"25"},{"size":16424,"mtime":1620049033028,"results":"34","hashOfConfig":"25"},{"size":450,"mtime":1613655520183,"results":"35","hashOfConfig":"25"},{"size":266,"mtime":1613671414551,"results":"36","hashOfConfig":"25"},{"size":4701,"mtime":1614860906405,"results":"37","hashOfConfig":"38"},{"size":2335,"mtime":1620047622708,"results":"39","hashOfConfig":"25"},{"size":2442,"mtime":1616097707643,"results":"40","hashOfConfig":"25"},{"size":1933,"mtime":1616097707629,"results":"41","hashOfConfig":"25"},{"size":3110,"mtime":1615476207987,"results":"42","hashOfConfig":"25"},{"size":337,"mtime":1614940946770,"results":"43","hashOfConfig":"38"},{"size":1341,"mtime":1615819187212,"results":"44","hashOfConfig":"25"},{"size":4331,"mtime":1615816978248,"results":"45","hashOfConfig":"25"},{"size":3774,"mtime":1616097707641,"results":"46","hashOfConfig":"25"},{"size":1809,"mtime":1615650734845,"results":"47","hashOfConfig":"25"},{"size":1159,"mtime":1620047677094,"results":"48","hashOfConfig":"25"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"ay6f91",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"1hmcuqe",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react\\02proect\\src\\index.tsx",[],["103","104"],"D:\\react\\02proect\\src\\reportWebVitals.ts",[],["105","106"],"D:\\react\\02proect\\src\\App.tsx",[],"D:\\react\\02proect\\src\\components\\Header\\Header.tsx",[],"D:\\react\\02proect\\src\\components\\Profile\\Profile.tsx",[],"D:\\react\\02proect\\src\\components\\Navbar\\Navbar.tsx",["107","108","109"],"D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["110","111"],"import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/state\";\r\n\r\n\r\nclass newPostText {\r\n}\r\n\r\nexport type MyPostsPropsType ={\r\n    posts: PostType[]\r\n    newPostText: string\r\n     addPost: () => void\r\n    updateNewPostText: (text: string)=> void\r\n}\r\n\r\nconst MyPosts = (props:MyPostsPropsType) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n    //ссылка ссьлающаяся на  элемент в textarea\r\n    //  let newPostElement = React.createRef();\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let addPost = () => {\r\n        props.addPost();\r\n        // let text = newPostElement.current.value;\r\n        // props.dispatch(addPostActionCreator())\r\n    }\r\n\r\n    const changeTextarea = () => {\r\n        // if (newPostElement.current) {\r\n\r\n        let text= newPostElement.current?.value;\r\n            props.updateNewPostText(text||\"\")\r\n            // let action = updateNewTextActionCreator(text)\r\n            // props.dispatch(action)\r\n\r\n\r\n    }\r\n\r\n    return <div className={s.postsBlock}>\r\n        <h3> my posts</h3>\r\n        <div>\r\n            <div>\r\n                <textarea ref={newPostElement} onChange={changeTextarea}\r\n                          value={props.newPostText}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={props.addPost}>Add post</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n}\r\nexport default MyPosts;\r\n//\r\n// posts: PostType[]\r\n// changeText: (newPostText: string )=> void\r\n//     message: PostType[]\r\n// likesCount: PostType[]\r\n//  addPost: (text: newPostText) => void\r\n//    newPostText: string\r\n//\r\n//\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Dialogs.tsx",["112","113","114","115","116"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType, DialogType, MessageType, StoreType} from \"../../redux/state\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reduser\";\r\n\r\n\r\n\r\n\r\ntype DialogsPropsType ={\r\n      dialogsPage : DialogsPageType\r\n    sendMessage:()=>void\r\n    updateNewMessageBody: (body: string) => void\r\n}\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements =  state.dialogs.map( d => <DialogItem name={d.name} id={d.id} key={d.id}/>);\r\n    let messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage();\r\n        // props.store.dispatch(sendMessageCreator())\r\n    }\r\n    let onNewMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = event.target.value\r\n        props.updateNewMessageBody(body)\r\n        // props.store.dispatch(updateNewMessageBodyCreator(body))\r\n    }\r\n\r\n    return <div className={s.dialogs}>\r\n        <div className={s.dialogsItem}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={s.messages}>\r\n\r\n           <div> {messagesElements}</div>\r\n            <div>\r\n                <div><textarea value={newMessageBody}\r\n                               onChange={onNewMessageChange}\r\n                               placeholder='Enter your message'></textarea></div>\r\n                <div><button onClick={onSendMessageClick}>send</button></div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n}\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\components\\Profile\\Profileinfo\\Profileinfo.tsx",["117"],"D:\\react\\02proect\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"D:\\react\\02proect\\src\\components\\Dialogs\\Message\\Message.tsx",[],"D:\\react\\02proect\\src\\redux\\state.tsx",[],["118","119"],"D:\\react\\02proect\\src\\redux\\profile-reduser.tsx",[],"D:\\react\\02proect\\src\\redux\\dialogs-reduser.tsx",["120"],"D:\\react\\02proect\\src\\components\\Dialogs\\DialogsContainer.tsx",["121"],"D:\\react\\02proect\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["122"],"import React from \"react\";\r\n\r\nimport {addPostActionCreator, updateNewTextActionCreator} from \"../../../redux/profile-reduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport  {StateType} from \"../../../redux/state\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state: StateType ) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst  mapDispatchToProps = (dispatch:  Dispatch) => {\r\n    return {\r\n        updateNewPostText: (text: string) => {\r\n            let action = updateNewTextActionCreator(text)\r\n            dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator())\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n\r\n//\r\n// posts: PostType[]\r\n// changeText: (newPostText: string )=> void\r\n//     message: PostType[]\r\n// likesCount: PostType[]\r\n//  addPost: (text: newPostText) => void\r\n//    newPostText: string\r\n// export type MyPostsPropsType = {\r\n//     store:  StoreType\r\n//     dispatch: (action: ActionsType)=> void\r\n//     updateNewPostText:  (text: string) => void\r\n//     newPost: string\r\n// }\r\n//\r\n// const MyPostsContainer = (props: MyPostsPropsType) => {\r\n//     // let postsElements =\r\n//     //     props.store._state.profilePage.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n//     // //ссылка ссьлающаяся на  элемент в textarea\r\n//     // //  let newPostElement = React.createRef();\r\n//     // let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n//     //переносим в  <StoreContext.Consumer>\r\n// //let state = props.store.getState()\r\n// //     let addPost = () => {\r\n// //         // let text = newPostElement.current.value;\r\n// //         props.store.dispatch(addPostActionCreator())\r\n// //     }\r\n// //     let changeTextarea = (text: string) => {\r\n// //         // if (newPostElement.current) {\r\n// //         //     let text = newPostElement.current.value;\r\n// //             let action = updateNewTextActionCreator(text)\r\n// //             props.store.dispatch(action)\r\n// //     }\r\n//\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState().profilePage\r\n//\r\n//                 let addPost = () => {\r\n//                     store.dispatch(addPostActionCreator())\r\n//                 }\r\n//                 let changeTextarea = (text: string) => {\r\n//                     let action = updateNewTextActionCreator(text)\r\n//                     store.dispatch(action)\r\n//                 }\r\n//\r\n//                 return <MyPosts updateNewPostText= {changeTextarea}\r\n//                                 addPost={addPost}\r\n//                                 posts={state.profilePage.posts}\r\n//                                 newPostText={state.profilePage.newPostText}/>}\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\react\\02proect\\src\\StoreContext.tsx",["123"],"D:\\react\\02proect\\src\\redux\\redux-store.tsx",[],"D:\\react\\02proect\\src\\redux\\users-reduser.ts",[],"D:\\react\\02proect\\src\\components\\Users\\UsersContainer.tsx",["124","125","126","127"],"import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport preloader from \"../../assets/images/preloader.gif\"\r\nimport {\r\n    follow,\r\n    initialStateType,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers, toggleIsFetching, unfollow,\r\n    UserType\r\n} from \"../../redux/users-reduser\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport Users from \"./Users\";\r\nimport axios from \"axios\";\r\nimport Preloader from \"../Preloader\";\r\n\r\ntype MapStatePropsType = {\r\n    users:  UserType[]\r\n    pageSize: any\r\n    totalUsersCount:number\r\n    currentPage: number\r\n    onPageChanged: any\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) =>void\r\n}\r\ntype MapDispatchToPropsType = {\r\n\r\n     setUsers:(users: UserType[]) =>void\r\n    setCurrentPage: (pageNumber: number) =>void\r\n     setTotalUsersCount: (totalCount: any) =>void\r\n\r\n}\r\ntype UsersPropsType = any\r\n    //MapStatePropsType & MapDispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component <UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage} \r\n        &count=${this.props.pageSize}`).then(response => {\r\n            this.props.toggleIsFetching(false);\r\n            this.props.setUsers(response.data.items);\r\n            this.props.setTotalUsersCount(response.data.totalCount);\r\n        });\r\n    }\r\n    onPageChanged = (pageNumber: any) => {\r\n        this.props.setCurrentPage (pageNumber);\r\n        this.props.toggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber} \r\n        &count=${this.props.pageSize}`).then(response => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(response.data.items)\r\n        });\r\n    }\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n        <Users totalUsersCount={this.props.totalUsersCount}\r\n                      pageSize={this.props.pageSize}\r\n                      currentPage={this.props.currentPage}\r\n                      onPageChanged={this.onPageChanged}\r\n                      users={this.props.users}\r\n                      follow={this.props.follow}\r\n                      unfollow={this.props.unfollow}\r\n         /></>\r\n    }}\r\n\r\nlet mapStateToProps = (state:  AppStateType) => {\r\n    return {\r\n\r\n       users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n\r\n    }\r\n}\r\n// let mapDispatchToProps = (dispatch: Dispatch) => {\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId));\r\n//             //диспатчим результат работы followAC\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(followAC(userId));\r\n//         },\r\n//         setUsers:(users: UserType[]) => {\r\n//         dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) =>{\r\n//             dispatch(setCurrentPageAC (pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) =>{\r\n//             dispatch(setTotalUsersCountAC (totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean)=> {\r\n//             dispatch( toggleIsFetching(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n//переделали без АС\r\n    export default connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setUsers,\r\n        setCurrentPage,\r\n        setTotalUsersCount,\r\n        toggleIsFetching\r\n    })(UsersContainer);","D:\\react\\02proect\\src\\components\\Users\\Users.tsx",["128","129"],"import React from 'react';\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/users-reduser\";\r\ntype PropsType ={\r\n    users:  UserType[]\r\n    pageSize: any\r\n    totalUsersCount:number\r\n    currentPage: number\r\n    onPageChanged: any\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) =>void\r\n\r\n}\r\n\r\nlet Users = (props: PropsType) => {\r\n    {\r\n        let pagesCount =Math.ceil( props.totalUsersCount / props.pageSize);\r\n        let pages = [];\r\n        for (let i=1; i<= pagesCount; i++){\r\n            pages.push(i)\r\n        }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                // @ts-ignore\r\n                return <span className={props.currentPage === p && s.selectedPade}\r\n                             onClick={(event) => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        </div>\r\n        {\r\n            props.users.map(u => <div key={u.id}>\r\n    <span>\r\n         <div>\r\n             <img src={u.photos.small != null ? u.photos.small : userPhoto} className={s.usersPhoto}/>\r\n         </div>\r\n       <div>\r\n         {u.followed\r\n             ? <button onClick={() => {\r\n                 props.unfollow(u.id)\r\n             }}>Unfollow</button>\r\n             : <button onClick={() => {\r\n                 props.follow(u.id)\r\n             }}>Follow</button>}\r\n        </div>\r\n     </span>\r\n                <span><span>\r\n        <div>{u.fullName}</div>\r\n        <div>{u.status}</div>\r\n    </span>\r\n    <span>\r\n        <div>{'u.location.country'}</div>\r\n        <div>{'u.location.city'}</div>\r\n    </span>\r\n                    </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}}\r\nexport default Users;\r\n","D:\\react\\02proect\\src\\components\\Profile\\ProfileContainer.tsx",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"130","replacedBy":"134"},{"ruleId":"132","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":17,"column":13,"nodeType":"138","endLine":17,"endColumn":16},{"ruleId":"136","severity":1,"message":"137","line":20,"column":9,"nodeType":"138","endLine":20,"endColumn":12},{"ruleId":"136","severity":1,"message":"137","line":23,"column":13,"nodeType":"138","endLine":23,"endColumn":16},{"ruleId":"139","severity":1,"message":"140","line":7,"column":7,"nodeType":"141","messageId":"142","endLine":7,"endColumn":18},{"ruleId":"139","severity":1,"message":"143","line":24,"column":9,"nodeType":"141","messageId":"142","endLine":24,"endColumn":16},{"ruleId":"139","severity":1,"message":"144","line":5,"column":26,"nodeType":"141","messageId":"142","endLine":5,"endColumn":36},{"ruleId":"139","severity":1,"message":"145","line":5,"column":38,"nodeType":"141","messageId":"142","endLine":5,"endColumn":49},{"ruleId":"139","severity":1,"message":"146","line":5,"column":51,"nodeType":"141","messageId":"142","endLine":5,"endColumn":60},{"ruleId":"139","severity":1,"message":"147","line":6,"column":9,"nodeType":"141","messageId":"142","endLine":6,"endColumn":27},{"ruleId":"139","severity":1,"message":"148","line":6,"column":29,"nodeType":"141","messageId":"142","endLine":6,"endColumn":56},{"ruleId":"149","severity":1,"message":"150","line":14,"column":13,"nodeType":"138","endLine":14,"endColumn":52},{"ruleId":"130","replacedBy":"151"},{"ruleId":"132","replacedBy":"152"},{"ruleId":"139","severity":1,"message":"153","line":1,"column":34,"nodeType":"141","messageId":"142","endLine":1,"endColumn":43},{"ruleId":"139","severity":1,"message":"154","line":1,"column":8,"nodeType":"141","messageId":"142","endLine":1,"endColumn":13},{"ruleId":"139","severity":1,"message":"154","line":1,"column":8,"nodeType":"141","messageId":"142","endLine":1,"endColumn":13},{"ruleId":"139","severity":1,"message":"154","line":2,"column":9,"nodeType":"141","messageId":"142","endLine":2,"endColumn":14},{"ruleId":"139","severity":1,"message":"155","line":3,"column":8,"nodeType":"141","messageId":"142","endLine":3,"endColumn":17},{"ruleId":"139","severity":1,"message":"156","line":6,"column":5,"nodeType":"141","messageId":"142","endLine":6,"endColumn":21},{"ruleId":"139","severity":1,"message":"157","line":17,"column":6,"nodeType":"141","messageId":"142","endLine":17,"endColumn":23},{"ruleId":"139","severity":1,"message":"158","line":26,"column":6,"nodeType":"141","messageId":"142","endLine":26,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":17,"column":5,"nodeType":"161","messageId":"162","endLine":61,"endColumn":2},{"ruleId":"149","severity":1,"message":"150","line":37,"column":14,"nodeType":"138","endLine":37,"endColumn":103},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],["163"],["164"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'newPostText' is defined but never used.","Identifier","unusedVar","'addPost' is assigned a value but never used.","'DialogType' is defined but never used.","'MessageType' is defined but never used.","'StoreType' is defined but never used.","'sendMessageCreator' is defined but never used.","'updateNewMessageBodyCreator' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["163"],["164"],"'StateType' is defined but never used.","'React' is defined but never used.","'preloader' is defined but never used.","'initialStateType' is defined but never used.","'MapStatePropsType' is defined but never used.","'MapDispatchToPropsType' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]